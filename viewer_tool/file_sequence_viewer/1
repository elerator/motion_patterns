import matplotlib
from tensor_viewer_ui import Ui_TensorViewer

import breeze_resources#light layout
import numpy as np
import pandas as pd

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QFileDialog, QMessageBox, QButtonGroup
from PyQt5.QtCore import QThread, Qt, pyqtSignal, QFile, QTextStream

import os
from PIL import Image
import PIL

import sys
from time import sleep

import traceback
from imagedisplay import fig2rgb_array

import matplotlib.pyplot as plt
from skimage.draw import line_aa

class FileDialog(QWidget):
    outfilepath = pyqtSignal(str)
    folder = pyqtSignal(str)
    #filepath = pyqtSignal(str)

    def __init__(self, file_ending = ".csv"):
        """ A File dialog could either be used to show a dialog to create and output file (i.e. to get a nonexisting path),
            to open a file or to get the name of a folder. The respective member functions may be used in this respect. The filepath is returned and emitted as a pyqtSignal
        Args:
            file_ending: The file ending of the file to be selected (Use empty string for Folder selection)
        """
        self.file_ending = file_ending
        QWidget.__init__(self)

    def create_output_file(self):
        """ Opens dialog for non-existing files and returns path.
        Returns:
            Path to a non-existing file (str). If the specified filename does not end with self.filepath the respective ending is added.
        """
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getSaveFileName(None,"Select the output file", "", self.file_ending[:] +" (*."+self.file_ending[1:]+");;", options=options)

        if filename:
            if not filename.endswith(self.file_ending):
                filename += self.file_ending
            self.outfilepath.emit(filename)
        return filename

    def open_file(self):
        """ Opens a file dialog for existing files. Emits path as signal outfilepath.
        Returns:
            Path to existing file. The ending specified in self.filepath is added if the file does not already end with named string (str)
        """
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getOpenFileName(None,"Select the output file", "", self.file_ending[1:] +" (*."+self.file_ending[1:]+");;", options=options)
        self.outfilepath.emit(filename)
        return filename


    def get_folder_path(self):
        """ Opens dialog for folder selection. Emits path as signal folder.
        Returns:
            Path to folder (str)
        """
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        path = QFileDialog.getExistingDirectory(None,"Select folder...",os.getcwd(),options=options)
        if path:
            self.folder.emit(path)
        return path

class TensorViewer(QWidget):
    def __init__(self, widget_handled, ui):
        """ Initializes Main App.
        args:
            widget_handled: For this widget events are handeled by MainApp
            ui: User interface
        """
        QWidget.__init__(self, widget_handled)

        self.ui = ui
        self.widget_handled = widget_handled #Widget for event Handling. All events are checked and if not arrow keys passed on. See eventFilter below
        self.tensor_loader = TensorViewer.TensorLoader()
        self.tensor = None

        self.current_slice = 0
        self.plot = None
        self.plot_n_samples = 1000
        self.frame_mean = []
        self.subsampling_param = 1
        self.make_connections()

    def make_connections(self):
        """ Establishes connections between GUI and functionalities."""
        self.tensor_loader.tensor.connect(self.set_tensor)
        self.tensor_loader.tensor_min.connect(self.ui.slices.set_min)
        self.tensor_loader.tensor_max.connect(self.ui.slices.set_max)
        self.tensor_loader.tensor_min.connect(lambda x: self.ui.tensor_min.setText(str(np.round(x, 4))))
        self.tensor_loader.tensor_max.connect(lambda x: self.ui.tensor_max.setText(str(np.round(x, 4))))
        self.tensor_loader.frame_means.connect(self.set_frame_mean)

        self.ui.next.clicked.connect(lambda: self.display_slice(self.current_slice+1))
        self.ui.previous.clicked.connect(lambda: self.display_slice(self.current_slice-1))
        self.ui.next.clicked.connect(lambda: self.update_plot(self.current_slice+1))
        self.ui.previous.clicked.connect(lambda: self.update_plot(self.current_slice-1))
        self.ui.downscale.stateChanged.connect(self.toggle_subsampling)

        self.set_normalization(self.ui.normalization.currentText())
        self.ui.normalization.currentTextChanged.connect(self.set_normalization)
        self.ui.colormap.currentTextChanged.connect(self.set_colormap)
        self.ui.v_min.valueChanged.connect(self.ui.slices.set_lower_threshold)
        self.ui.v_max.valueChanged.connect(self.ui.slices.set_upper_threshold)

        self.tensor_loader.progress.connect(self.ui.progress.setValue)

    def set_normalization(self, normalization):
        print(normalization)
        if normalization == "frame normalization":
            self.ui.slices.set_framewise_normalization(True)
            self.display_slice(self.current_slice)
        elif normalization == "tensor normalization":
            self.ui.slices.set_framewise_normalization(False)
            self.display_slice(self.current_slice)

    def normalize(self, tensor):
        tensor -= np.nanmin(tensor)
        tensor /= np.nanmax(tensor)
        return tensor

    def toggle_subsampling(self):
        if self.ui.downscale.isChecked():
            self.subsampling_param = 4
        else:
            self.subsampling_param = 1

    def set_tensor(self, tensor):
        """ Sets 3D data tensor
        Args:
            tensor: 3D Numpy array
        """
        self.current_slice = 0
        tensor = tensor[:,::self.subsampling_param,::self.subsampling_param]
        self.tensor = tensor
        self.ui.loading_info_stack.setCurrentIndex(0)
        self.ui.file_info.setText("Loaded "+self.latest_tensor_name+" successfully")
        self.display_slice(self.current_slice)


    def disable_frame_mean_for_multiple_tensors(self):
        if len(self.frame_mean):#if there is more then one tensor loaded
            self.ui.normalization.setEnabled(False)
            self.ui.normalization.blockSignals(True)
            self.ui.normalization.setCurrentIndex(1)



    def fast_plot(self, y, x, img = None, add=False):
        img_width = 1000
        img_height = 201

        if np.any(y>=200):
            #print("Y smaller zero occured")
            #print(y[y>=201])
            y[y>200] = 200
        if np.any(y<0):
            #print("Y smaller zero occured")
            #print(y[y<0])
            y[y<0] = 0

        if type(img) == type(None):
            img = np.ndarray((img_height, img_width, 3), dtype=np.uint8)
            img.fill(0)

        if not add:
            img.fill(0)

        rrs = []
        ccs = []
        vals = []
        for y1,y2,x1,x2 in zip(y[:-1],y[1:], x[:-1],x[1:]):
            rr, cc, val = line_aa(y1, x1, y2, x2)
            rrs.extend(rr)
            ccs.extend(cc)
            vals.extend(val)
        img[rrs, ccs, 1] = np.array(vals)  * 255

        img[:,499:501, 2] = 0
        img[:,499:501, 0] = 255
        img[:,499:501, 1] = 0
        return img

    def update_plot(self, frame=0):
        if not self.ui.live_update_plot.isChecked():
            return
        if type(self.plot) != type(None):
            self.plot.fill(0)
        frame += self.plot_n_samples//2
        x = np.arange(self.plot_n_samples)#vmax must be 1000

        for frame_mean in self.frame_mean:
            y = np.array(frame_mean[frame-self.plot_n_samples//2:frame+self.plot_n_samples//2], dtype=np.int)
            self.plot = self.fast_plot(y, x, self.plot, add=True)
            self.ui.plot.update(self.plot)

    def set_frame_mean(self, mean):
        mean *= -1
        mean += 1

        mean *= 200#for display purposes
        mean = np.pad(mean, self.plot_n_samples//2)
        print(np.min(mean))
        print(np.max(mean))

        if len(self.frame_mean) >= 1:
            print("DISABLING")
            self.disable_frame_mean_for_multiple_tensors()
        self.frame_mean.append(mean)
        self.update_plot()

    def set_colormap(self, colormap):
        if colormap == "grayscale":
            self.ui.slices.set_colormap("grayscale")
        elif colormap == "viridis":
            self.ui.slices.set_colormap("viridis")
        self.display_slice(self.current_slice)

    def get_tensor(self):
        """ Returns current tensor """
        return self.tensor

    def get_current_slice(self):
        """ Getter for current slice"""
        slice = None
        idx = self.current_slice
        if type(self.tensor) != type(None):
            slice = self.tensor[idx,:,:].copy()#TODO: Check if correct...
            slice[np.isnan(slice)] = 0#TODO make more efficient
            self.ui.frame_mean.setText(str(np.round(np.mean(slice),4)))
            self.ui.frame_min.setText(str(np.round(np.min(slice),4)))
            self.ui.frame_max.setText(str(np.round(np.max(slice),4)))
            return slice
        return None

    def display_slice(self, idx):
        """ Displayes current slice"""
        old_idx = self.current_slice
        try:
            self.current_slice = idx
            self.ui.slices.update(self.get_current_slice())
            self.ui.slice.setValue(self.current_slice)
        except Exception as err:
            self.current_slice = old_idx
            print(err)
            traceback.print_tb(err.__traceback__)

    def eventFilter(self, source, event):
        """ Filters key events such that arrow keys may be handled.
            Args:
                source: Source of event
                event: Event to be handled
        """
        if event.type() == QtCore.QEvent.KeyRelease:
            id_right = 16777236
            id_left = 16777234
            if event.key() == id_right:
                if self.tensor_loader.isRunning:
                   return True
                if self.current_slice >= len(self.tensor):
                   self.file_idx += 1
                   self.load_current_tensor()
                   return True
                if self.current_slice <= 0:
                   self.file_idx -= 1
                   self.load_current_tensor()
                   return True
                self.display_slice(self.current_slice+1)
                self.update_plot(self.current_slice+1)

            elif event.key() == id_left:
                self.display_slice(self.current_slice-1)
                self.update_plot(self.current_slice-1)

        try:#When closing the app the widget handled might already have been destroyed
            return True#self.widget_handled.eventFilter(source, event)#Execute the default actions for the event
        except:
            return True#a true value prevents the event from being sent on to other objects

    def load_tensor(self):
        """ Gets filename and sets index"""
        dialog = FileDialog(".npy")
        self.path = dialog.get_folder_path()
        self.filenames = [os.path.join(self.path, f) for f in os.listdir(self.path)] 
        self.current_file_idx = 0
        self.load_current_tensor()
    
    def load_current_tensor(self):
        """ Trigger tensor loader for current filename """
        path = self.filenames[self.current_file_idx]
        self.latest_tensor_name = os.path.basename(path) 
        self.tensor_loader.filepath = path
        self.ui.loading_info_stack.setCurrentIndex(0)
        self.tensor_loader.start()
        self.ui.loading_info_stack.setCurrentIndex(1)


    def close_all(self):
        self.tensor = None
        self.frame_mean = []
        self.ui.normalization.setEnabled(True)
        self.ui.normalization.blockSignals(False)
        self.ui.normalization.setCurrentIndex(0)


    class TensorLoader(QThread):#TODO. Set deamom
        tensor = pyqtSignal(np.ndarray)
        tensor_min = pyqtSignal(float)
        tensor_max = pyqtSignal(float)
        frame_means = pyqtSignal(np.ndarray)
        progress = pyqtSignal(int)

        def __init__(self):
            """ Thread for loading tensor from image files in parallel"""
            super(TensorViewer.TensorLoader, self).__init__()
            self.first_frames_only = None
            self.filepath = None
            self.load_blocksize = 128
            self.set_first_frames_only(2000)#TODO set via gui

        def set_first_frames_only(self, n_frames):
            self.first_frames_only = n_frames

        def load(self):
            blocksize = self.load_blocksize

            try:
                mmap = np.load(self.filepath, mmap_mode='r')
                y = np.empty_like(mmap)
                n_blocks = int(np.ceil(mmap.shape[0] / blocksize))
                for b in range(n_blocks):
                    self.progress.emit(int(100*(b/n_blocks)))# use any progress indicator
                    y[b*blocksize : (b+1) * blocksize] = mmap[b*blocksize : (b+1) * blocksize]
            finally:
                del mmap  # make sure file is closed again
            return y

        def run(self):
            """ Loads tensor. Emits data as self.tensor (PyQtSignal)."""
            try:
                tensor = self.load()
                if self.first_frames_only:
                   tensor = tensor[:self.first_frames_only]
                tensor -= np.nanmin(tensor)
                self.tensor.emit(tensor)
                min = np.nanmin(tensor)
                max = np.nanmax(tensor)
                self.tensor_min.emit(min)
                self.tensor_max.emit(max)

                mean = np.nanmean(tensor, axis=(1,2))
                mean -= np.min(mean)
                mean /= np.max(mean)
                self.frame_means.emit(mean)
            except Exception as e:
                print("No valid folder. Loading tensor failed")
                print(e)

class Main():
    def __init__(self):
        """ Initializes program. Starts app, creates window and implements functions accessible via action bar."""
        self.app = QtWidgets.QApplication(sys.argv)
        self.set_color_theme(self.app, "light")

        MainWindow = QtWidgets.QMainWindow()#Create a window
        self.main_ui = Ui_TensorViewer()#Instanciate our UI
        self.main_ui.setupUi(MainWindow)#Setup our UI as this MainWindow

        self.source_dir_opener = FileDialog()

        self.main_ui.centralwidget.setFocusPolicy(Qt.NoFocus)

        self.main_app = TensorViewer(self.main_ui.centralwidget, self.main_ui)#Install MainApp as event filter for handling of arrow keys

        self.main_ui.centralwidget.installEventFilter(self.main_app)

        self.make_connections()
        MainWindow.show()#and we show it directly

        self.app.exec_()
        sys.exit()

    def set_color_theme(self,app, color):
        """ Set ui color scheme to either dark or bright
        Args:
            app: PyQt App the color scheme is applied to
            color: String specifying the color scheme. Either "dark" or "bright".

        """
        path = ""
        if color == "dark":
            path += ":/dark.qss"
            self.use_light = False
        elif color == "light":
            path += ":/light.qss"
            self.use_light = True
        else:
            return
        file = QFile(path)
        file.open(QFile.ReadOnly | QFile.Text)
        stream = QTextStream(file)
        app.setStyleSheet(stream.readAll())

    def make_connections(self):
        """ Establishes connections between actions and GUI elements"""
        self.main_ui.actionOpen_Tensor.triggered.connect(self.main_app.load_tensor)
        self.main_ui.close_all_tensors.triggered.connect(self.main_app.close_all)


if __name__ == "__main__":
    m = Main()#start app
